/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct StatusApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> StatusApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> StatusApiClient<C> {
        StatusApiClient { configuration }
    }
}

pub trait StatusApi {
    fn get_status(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::Status, Error>>>>;
    fn get_status_applications(
        &self,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<::std::collections::HashMap<String, crate::models::StatusApplicationsApp>, Error>,
            >,
        >,
    >;
    fn get_status_applications_app(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsApp, Error>>>>;
    fn get_status_applications_app_processes(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsAppProcesses, Error>>>>;
    fn get_status_applications_app_processes_idle(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_applications_app_processes_running(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_applications_app_processes_starting(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_applications_app_requests(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsAppRequests, Error>>>>;
    fn get_status_applications_app_requests_active(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_connections(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusConnections, Error>>>>;
    fn get_status_connections_accepted(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_connections_active(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_connections_closed(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_connections_idle(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_status_requests(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusRequests, Error>>>>;
    fn get_status_requests_total(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
}

impl<C: hyper::client::connect::Connect> StatusApi for StatusApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn get_status(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::Status, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications(
        &self,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<::std::collections::HashMap<String, crate::models::StatusApplicationsApp>, Error>,
            >,
        >,
    > {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/applications".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsApp, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/status/applications/{appName}".to_string());
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_processes(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsAppProcesses, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/processes".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_processes_idle(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/processes/idle".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_processes_running(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/processes/running".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_processes_starting(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/processes/starting".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_requests(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusApplicationsAppRequests, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/requests".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_applications_app_requests_active(
        &self,
        app_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/status/applications/{appName}/requests/active".to_string(),
        );
        req = req.with_path_param("appName".to_string(), app_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_connections(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusConnections, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/connections".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_connections_accepted(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/connections/accepted".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_connections_active(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/connections/active".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_connections_closed(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/connections/closed".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_connections_idle(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/connections/idle".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_requests(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::StatusRequests, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/requests".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_status_requests_total(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/status/requests/total".to_string());

        req.execute(self.configuration.borrow())
    }
}
