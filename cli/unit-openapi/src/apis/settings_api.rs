/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct SettingsApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> SettingsApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SettingsApiClient<C> {
        SettingsApiClient { configuration }
    }
}

pub trait SettingsApi {
    fn delete_settings(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_discard_unsafe_fields(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_body_read_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_header_read_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_idle_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_max_body_size(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_send_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_static(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_static_mime_type(
        &self,
        mime_type: &str,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_http_static_mime_types(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_log_route(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn delete_settings_server_version(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn get_settings(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettings, Error>>>>;
    fn get_settings_discard_unsafe_fields(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>>;
    fn get_settings_http(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttp, Error>>>>;
    fn get_settings_http_body_read_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_settings_http_header_read_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_settings_http_idle_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_settings_http_max_body_size(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_settings_http_send_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>>;
    fn get_settings_http_static(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttpStatic, Error>>>>;
    fn get_settings_http_static_mime_type(
        &self,
        mime_type: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttpStaticMimeType, Error>>>>;
    fn get_settings_http_static_mime_types(
        &self,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<
                    ::std::collections::HashMap<String, crate::models::ConfigSettingsHttpStaticMimeType>,
                    Error,
                >,
            >,
        >,
    >;
    fn get_settings_log_route(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>>;
    fn get_settings_server_version(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>>;
    fn update_settings(
        &self,
        config_settings: crate::models::ConfigSettings,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_discard_unsafe_fields(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http(
        &self,
        config_settings_http: crate::models::ConfigSettingsHttp,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_body_read_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_header_read_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_idle_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_max_body_size(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_send_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_static(
        &self,
        config_settings_http_static: crate::models::ConfigSettingsHttpStatic,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_static_mime_type(
        &self,
        mime_type: &str,
        config_settings_http_static_mime_type: Option<crate::models::ConfigSettingsHttpStaticMimeType>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_http_static_mime_types(
        &self,
        request_body: ::std::collections::HashMap<String, crate::models::ConfigSettingsHttpStaticMimeType>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_log_route(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn update_settings_server_version(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
}

impl<C: hyper::client::connect::Connect> SettingsApi for SettingsApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn delete_settings(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/config/settings".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_discard_unsafe_fields(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/discard_unsafe_fields".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_body_read_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/body_read_timeout".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_header_read_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/header_read_timeout".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_idle_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http/idle_timeout".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_max_body_size(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http/max_body_size".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_send_timeout(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http/send_timeout".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_static(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http/static".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_static_mime_type(
        &self,
        mime_type: &str,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/static/mime_types/{mimeType}".to_string(),
        );
        req = req.with_path_param("mimeType".to_string(), mime_type.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_http_static_mime_types(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/static/mime_types".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_log_route(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::DELETE, "/config/settings/http/log_route".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_settings_server_version(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::DELETE,
            "/config/settings/http/server_version".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettings, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/config/settings".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_discard_unsafe_fields(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/config/settings/http/discard_unsafe_fields".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttp, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/config/settings/http".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_body_read_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/config/settings/http/body_read_timeout".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_header_read_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/config/settings/http/header_read_timeout".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_idle_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/idle_timeout".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_max_body_size(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/max_body_size".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_send_timeout(&self) -> Pin<Box<dyn Future<Output = Result<i32, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/send_timeout".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_static(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttpStatic, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/static".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_static_mime_type(
        &self,
        mime_type: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigSettingsHttpStaticMimeType, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/config/settings/http/static/mime_types/{mimeType}".to_string(),
        );
        req = req.with_path_param("mimeType".to_string(), mime_type.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_http_static_mime_types(
        &self,
    ) -> Pin<
        Box<
            dyn Future<
                Output = Result<
                    ::std::collections::HashMap<String, crate::models::ConfigSettingsHttpStaticMimeType>,
                    Error,
                >,
            >,
        >,
    > {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/config/settings/http/static/mime_types".to_string(),
        );

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_log_route(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/log_route".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_settings_server_version(&self) -> Pin<Box<dyn Future<Output = Result<bool, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/config/settings/http/server_version".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings(
        &self,
        config_settings: crate::models::ConfigSettings,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/config/settings".to_string());
        req = req.with_body_param(config_settings);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_discard_unsafe_fields(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/config/settings/http/discard_unsafe_fields".to_string(),
        );
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http(
        &self,
        config_settings_http: crate::models::ConfigSettingsHttp,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http".to_string());
        req = req.with_body_param(config_settings_http);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_body_read_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/config/settings/http/body_read_timeout".to_string(),
        );
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_header_read_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/config/settings/http/header_read_timeout".to_string(),
        );
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_idle_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/idle_timeout".to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_max_body_size(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/max_body_size".to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_send_timeout(
        &self,
        body: i32,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/send_timeout".to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_static(
        &self,
        config_settings_http_static: crate::models::ConfigSettingsHttpStatic,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/static".to_string());
        req = req.with_body_param(config_settings_http_static);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_static_mime_type(
        &self,
        mime_type: &str,
        config_settings_http_static_mime_type: Option<crate::models::ConfigSettingsHttpStaticMimeType>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/config/settings/http/static/mime_types/{mimeType}".to_string(),
        );
        req = req.with_path_param("mimeType".to_string(), mime_type.to_string());
        req = req.with_body_param(config_settings_http_static_mime_type);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_http_static_mime_types(
        &self,
        request_body: ::std::collections::HashMap<String, crate::models::ConfigSettingsHttpStaticMimeType>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::PUT,
            "/config/settings/http/static/mime_types".to_string(),
        );
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_log_route(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/log_route".to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_settings_server_version(
        &self,
        body: bool,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::PUT, "/config/settings/http/server_version".to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }
}
