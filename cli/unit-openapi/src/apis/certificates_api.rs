/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct CertificatesApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> CertificatesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CertificatesApiClient<C> {
        CertificatesApiClient { configuration }
    }
}

pub trait CertificatesApi {
    fn get_cert_bundle(
        &self,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundle, Error>>>>;
    fn get_cert_bundle_chain(
        &self,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::CertBundleChainCert>, Error>>>>;
    fn get_cert_bundle_chain_cert(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCert, Error>>>>;
    fn get_cert_bundle_chain_cert_issuer(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertIssuer, Error>>>>;
    fn get_cert_bundle_chain_cert_issuer_cn(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_issuer_org(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_issuer_state(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_subj(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertSubj, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_alt(
        &self,
        array_index: i32,
        array_index2: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_alt_array(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<String>, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_cn(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_country(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_org(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_subj_state(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_valid(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertValidity, Error>>>>;
    fn get_cert_bundle_chain_cert_valid_since(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_cert_valid_until(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_chain_certissuer_country(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_cert_bundle_key(&self, bundle_name: &str) -> Pin<Box<dyn Future<Output = Result<String, Error>>>>;
    fn get_certs(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, crate::models::CertBundle>, Error>>>>;
    fn put_cert_bundle(
        &self,
        bundle_name: &str,
        body: std::path::PathBuf,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
}

impl<C: hyper::client::connect::Connect> CertificatesApi for CertificatesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn get_cert_bundle(
        &self,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundle, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/certificates/{bundleName}".to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain(
        &self,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::CertBundleChainCert>, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/certificates/{bundleName}/chain".to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCert, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_issuer(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertIssuer, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/issuer".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_issuer_cn(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/issuer/common_name".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_issuer_org(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/issuer/organization".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_issuer_state(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/issuer/state_or_province".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertSubj, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_alt(
        &self,
        array_index: i32,
        array_index2: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/alt_names/{arrayIndex2}".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("arrayIndex2".to_string(), array_index2.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_alt_array(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<Vec<String>, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/alt_names".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_cn(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/common_name".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_country(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/country".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_org(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/organization".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_subj_state(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/subject/state_or_province".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_valid(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<crate::models::CertBundleChainCertValidity, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/validity".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_valid_since(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/validity/since".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_cert_valid_until(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/validity/until".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_chain_certissuer_country(
        &self,
        array_index: i32,
        bundle_name: &str,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/certificates/{bundleName}/chain/{arrayIndex}/issuer/country".to_string(),
        );
        req = req.with_path_param("arrayIndex".to_string(), array_index.to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_cert_bundle_key(&self, bundle_name: &str) -> Pin<Box<dyn Future<Output = Result<String, Error>>>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::GET, "/certificates/{bundleName}/key".to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_certs(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, crate::models::CertBundle>, Error>>>>
    {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/certificates".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn put_cert_bundle(
        &self,
        bundle_name: &str,
        body: std::path::PathBuf,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/certificates/{bundleName}".to_string());
        req = req.with_path_param("bundleName".to_string(), bundle_name.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }
}
