/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::rc::Rc;

use futures::Future;
use hyper;

use super::request as __internal_request;
use super::{configuration, Error};

pub struct RoutesApiClient<C: hyper::client::connect::Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> RoutesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RoutesApiClient<C> {
        RoutesApiClient { configuration }
    }
}

pub trait RoutesApi {
    fn delete_routes(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
    fn get_routes(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigRoutes, Error>>>>;
    fn update_routes(
        &self,
        config_routes: Option<crate::models::ConfigRoutes>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>>;
}

impl<C: hyper::client::connect::Connect> RoutesApi for RoutesApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn delete_routes(
        &self,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/config/routes".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_routes(&self) -> Pin<Box<dyn Future<Output = Result<crate::models::ConfigRoutes, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/config/routes".to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_routes(
        &self,
        config_routes: Option<crate::models::ConfigRoutes>,
    ) -> Pin<Box<dyn Future<Output = Result<::std::collections::HashMap<String, String>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/config/routes".to_string());
        req = req.with_body_param(config_routes);

        req.execute(self.configuration.borrow())
    }
}
