/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigApplicationCommonIsolation : Manages the isolation of an application process.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigApplicationCommonIsolation {
    #[serde(rename = "automount", skip_serializing_if = "Option::is_none")]
    pub automount: Option<Box<crate::models::ConfigApplicationCommonIsolationAutomount>>,
    #[serde(rename = "cgroup", skip_serializing_if = "Option::is_none")]
    pub cgroup: Option<Box<crate::models::ConfigApplicationCommonIsolationCgroup>>,
    /// Array of group ID mapping objects.
    #[serde(rename = "gidmap", skip_serializing_if = "Option::is_none")]
    pub gidmap: Option<Vec<crate::models::ConfigApplicationCommonIsolationGidmapInner>>,
    #[serde(rename = "namespaces", skip_serializing_if = "Option::is_none")]
    pub namespaces: Option<Box<crate::models::ConfigApplicationCommonIsolationNamespaces>>,
    /// pathname of the directory to be used as the new file system root for the app.
    #[serde(rename = "rootfs", skip_serializing_if = "Option::is_none")]
    pub rootfs: Option<String>,
    /// Array of user ID mapping objects.
    #[serde(rename = "uidmap", skip_serializing_if = "Option::is_none")]
    pub uidmap: Option<Vec<crate::models::ConfigApplicationCommonIsolationUidmapInner>>,
}

impl ConfigApplicationCommonIsolation {
    /// Manages the isolation of an application process.
    pub fn new() -> ConfigApplicationCommonIsolation {
        ConfigApplicationCommonIsolation {
            automount: None,
            cgroup: None,
            gidmap: None,
            namespaces: None,
            rootfs: None,
            uidmap: None,
        }
    }
}
