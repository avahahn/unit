/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array items—by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigApplication : An object that defines an individual application.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "r#type")]
pub enum ConfigApplication {
    #[serde(rename = "external")]
    ConfigApplicationExternal {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// Pathname of the app, absolute or relative to `working_directory`.
        #[serde(rename = "executable")]
        executable: String,
        /// An array of strings.
        #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
        arguments: Option<Vec<String>>,
    },
    #[serde(rename = "java")]
    ConfigApplicationJava {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// Pathname of the application’s .war file (packaged or unpackaged).
        #[serde(rename = "webapp")]
        webapp: String,
        /// An array of strings.
        #[serde(rename = "classpath", skip_serializing_if = "Option::is_none")]
        classpath: Option<Vec<String>>,
        /// An array of strings.
        #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
        options: Option<Vec<String>>,
        /// Stack size of a worker thread in bytes.
        #[serde(rename = "thread_stack_size", skip_serializing_if = "Option::is_none")]
        thread_stack_size: Option<i32>,
        /// Number of worker threads per app process.
        #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
        threads: Option<i32>,
    },
    #[serde(rename = "perl")]
    ConfigApplicationPerl {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// PSGI script path.
        #[serde(rename = "script")]
        script: String,
        /// Stack size of a worker thread in bytes.
        #[serde(rename = "thread_stack_size", skip_serializing_if = "Option::is_none")]
        thread_stack_size: Option<i32>,
        /// Number of worker threads per app process.
        #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
        threads: Option<i32>,
    },
    #[serde(rename = "php")]
    ConfigApplicationPhp {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// Base directory of the app’s file structure.
        #[serde(rename = "root")]
        root: String,
        /// Filename added to URI paths that point to directories if no `script` is set.
        #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
        index: Option<String>,
        #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
        options: Option<Box<crate::models::ConfigApplicationPhpAllOfOptions>>,
        /// Filename of a `root`-based PHP script that serves all requests to the app.
        #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
        script: Option<String>,
        /// Application sections with custom `root`, `script`, and `index` values.
        #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
        targets: Option<::std::collections::HashMap<String, crate::models::ConfigApplicationPhpAllOfTargets>>,
    },
    #[serde(rename = "python")]
    ConfigApplicationPython {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// App’s module name.
        #[serde(rename = "module")]
        module: String,
        /// Name of the `module`-based callable that Unit runs as the app.
        #[serde(rename = "callable", skip_serializing_if = "Option::is_none")]
        callable: Option<String>,
        /// Path to the app’s virtual environment, absolute or relative to `working_directory`.
        #[serde(rename = "home", skip_serializing_if = "Option::is_none")]
        home: Option<String>,
        #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
        path: Option<Box<crate::models::ConfigApplicationPythonAllOfPath>>,
        /// SCRIPT_NAME context value for WSGI or the root_path context value for ASGI.
        #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
        prefix: Option<String>,
        /// Hints Unit that the app uses a certain interface.
        #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
        protocol: Option<Protocol>,
        /// App sections with custom `module` and `callable` values.
        #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
        targets: Option<::std::collections::HashMap<String, crate::models::ConfigApplicationPythonAllOfTargets>>,
        /// Stack size of a worker thread in bytes.
        #[serde(rename = "thread_stack_size", skip_serializing_if = "Option::is_none")]
        thread_stack_size: Option<i32>,
        /// Number of worker threads per app process.
        #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
        threads: Option<i32>,
    },
    #[serde(rename = "ruby")]
    ConfigApplicationRuby {
        /// Environment variables to be passed to the app.
        #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
        environment: Option<::std::collections::HashMap<String, String>>,
        /// Group name that runs the app process.
        #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
        group: Option<String>,
        #[serde(rename = "isolation", skip_serializing_if = "Option::is_none")]
        isolation: Option<Box<crate::models::ConfigApplicationCommonIsolation>>,
        #[serde(rename = "limits", skip_serializing_if = "Option::is_none")]
        limits: Option<Box<crate::models::ConfigApplicationCommonLimits>>,
        #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
        processes: Option<Box<crate::models::ConfigApplicationCommonProcesses>>,
        /// Username that runs the app process.
        #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
        user: Option<String>,
        /// Filename where Unit redirects the app's stderr stream.
        #[serde(rename = "stderr", skip_serializing_if = "Option::is_none")]
        stderr: Option<String>,
        /// Filename where Unit redirects the app's stdout stream.
        #[serde(rename = "stdout", skip_serializing_if = "Option::is_none")]
        stdout: Option<String>,
        /// The app’s working directory.
        #[serde(rename = "working_directory", skip_serializing_if = "Option::is_none")]
        working_directory: Option<String>,
        /// Rack script pathname, including the .ru extension.
        #[serde(rename = "script")]
        script: String,
        /// Pathname of the .rb file setting the event hooks invoked during the app’s lifecycle.
        #[serde(rename = "hooks", skip_serializing_if = "Option::is_none")]
        hooks: Option<String>,
        /// Number of worker threads per app process.
        #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
        threads: Option<i32>,
    },
}

/// Application type and language version.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "external")]
    External,
    #[serde(rename = "java")]
    Java,
    #[serde(rename = "perl")]
    Perl,
    #[serde(rename = "php")]
    Php,
    #[serde(rename = "python")]
    Python,
    #[serde(rename = "ruby")]
    Ruby,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::External
    }
}
/// Hints Unit that the app uses a certain interface.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "asgi")]
    Asgi,
    #[serde(rename = "wsgi")]
    Wsgi,
}

impl Default for Protocol {
    fn default() -> Protocol {
        Self::Asgi
    }
}
