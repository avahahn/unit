/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigListenerTls : Defines SSL/TLS settings for the listener.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigListenerTls {
    /// Defines the SSL configuration commands to be set for the listener.
    #[serde(rename = "conf_commands", skip_serializing_if = "Option::is_none")]
    pub conf_commands: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<Box<crate::models::ConfigListenerTlsSession>>,
    #[serde(rename = "certificate")]
    pub certificate: Box<crate::models::ConfigListenerTlsCertificate>,
}

impl ConfigListenerTls {
    /// Defines SSL/TLS settings for the listener.
    pub fn new(certificate: crate::models::ConfigListenerTlsCertificate) -> ConfigListenerTls {
        ConfigListenerTls {
            conf_commands: None,
            session: None,
            certificate: Box::new(certificate),
        }
    }
}
