/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array items—by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigSettingsHttp : An object whose options represent global HTTP settings in Unit.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigSettingsHttp {
    /// Maximum number of seconds to read data from the body of a client’s request.
    #[serde(rename = "body_read_timeout", skip_serializing_if = "Option::is_none")]
    pub body_read_timeout: Option<i32>,
    /// If `true`, Unit only processes header names made of alphanumerics and hyphens.
    #[serde(rename = "discard_unsafe_fields", skip_serializing_if = "Option::is_none")]
    pub discard_unsafe_fields: Option<bool>,
    /// Maximum number of seconds to read the header of a client’s request.
    #[serde(rename = "header_read_timeout", skip_serializing_if = "Option::is_none")]
    pub header_read_timeout: Option<i32>,
    /// Maximum number of seconds between requests in a keep-alive connection.
    #[serde(rename = "idle_timeout", skip_serializing_if = "Option::is_none")]
    pub idle_timeout: Option<i32>,
    /// Enables or disables router logging.
    #[serde(rename = "log_route", skip_serializing_if = "Option::is_none")]
    pub log_route: Option<bool>,
    /// Maximum number of bytes in the body of a client’s request.
    #[serde(rename = "max_body_size", skip_serializing_if = "Option::is_none")]
    pub max_body_size: Option<i32>,
    /// Maximum number of seconds to transmit data as a response to the client.
    #[serde(rename = "send_timeout", skip_serializing_if = "Option::is_none")]
    pub send_timeout: Option<i32>,
    /// Enables or disables version numbers in Unit's `Server` header fields.
    #[serde(rename = "server_version", skip_serializing_if = "Option::is_none")]
    pub server_version: Option<bool>,
    #[serde(rename = "static", skip_serializing_if = "Option::is_none")]
    pub r#static: Option<Box<crate::models::ConfigSettingsHttpStatic>>,
}

impl ConfigSettingsHttp {
    /// An object whose options represent global HTTP settings in Unit.
    pub fn new() -> ConfigSettingsHttp {
        ConfigSettingsHttp {
            body_read_timeout: None,
            discard_unsafe_fields: None,
            header_read_timeout: None,
            idle_timeout: None,
            log_route: None,
            max_body_size: None,
            send_timeout: None,
            server_version: None,
            r#static: None,
        }
    }
}
