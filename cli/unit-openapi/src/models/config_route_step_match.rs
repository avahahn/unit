/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array itemsâ€”by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigRouteStepMatch : An object whose options define a step's conditions.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigRouteStepMatch {
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Box<crate::models::ConfigRouteStepMatchArguments>>,
    #[serde(rename = "cookies", skip_serializing_if = "Option::is_none")]
    pub cookies: Option<Box<crate::models::ConfigRouteStepMatchCookies>>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<Box<crate::models::StringOrStringArray>>,
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Box<crate::models::ConfigRouteStepMatchHeaders>>,
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<Box<crate::models::StringOrStringArray>>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<Box<crate::models::StringOrStringArray>>,
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<Box<crate::models::StringOrStringArray>>,
    /// URI scheme. Accepts only two patterns, either `http` or `https`.
    #[serde(rename = "scheme", skip_serializing_if = "Option::is_none")]
    pub scheme: Option<Scheme>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::StringOrStringArray>>,
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<Box<crate::models::StringOrStringArray>>,
}

impl ConfigRouteStepMatch {
    /// An object whose options define a step's conditions.
    pub fn new() -> ConfigRouteStepMatch {
        ConfigRouteStepMatch {
            arguments: None,
            cookies: None,
            destination: None,
            headers: None,
            host: None,
            method: None,
            query: None,
            scheme: None,
            source: None,
            uri: None,
        }
    }
}

/// URI scheme. Accepts only two patterns, either `http` or `https`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Scheme {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

impl Default for Scheme {
    fn default() -> Scheme {
        Self::Http
    }
}
