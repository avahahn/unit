/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array items—by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigApplicationPythonAllOf {
    /// App’s module name.
    #[serde(rename = "module")]
    pub module: String,
    /// Name of the `module`-based callable that Unit runs as the app.
    #[serde(rename = "callable", skip_serializing_if = "Option::is_none")]
    pub callable: Option<String>,
    /// Path to the app’s virtual environment, absolute or relative to `working_directory`.
    #[serde(rename = "home", skip_serializing_if = "Option::is_none")]
    pub home: Option<String>,
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<Box<crate::models::ConfigApplicationPythonAllOfPath>>,
    /// SCRIPT_NAME context value for WSGI or the root_path context value for ASGI.
    #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Hints Unit that the app uses a certain interface.
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Protocol>,
    /// App sections with custom `module` and `callable` values.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<::std::collections::HashMap<String, crate::models::ConfigApplicationPythonAllOfTargets>>,
    /// Stack size of a worker thread in bytes.
    #[serde(rename = "thread_stack_size", skip_serializing_if = "Option::is_none")]
    pub thread_stack_size: Option<i32>,
    /// Number of worker threads per app process.
    #[serde(rename = "threads", skip_serializing_if = "Option::is_none")]
    pub threads: Option<i32>,
}

impl ConfigApplicationPythonAllOf {
    pub fn new(module: String) -> ConfigApplicationPythonAllOf {
        ConfigApplicationPythonAllOf {
            module,
            callable: None,
            home: None,
            path: None,
            prefix: None,
            protocol: None,
            targets: None,
            thread_stack_size: None,
            threads: None,
        }
    }
}

/// Hints Unit that the app uses a certain interface.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "asgi")]
    Asgi,
    #[serde(rename = "wsgi")]
    Wsgi,
}

impl Default for Protocol {
    fn default() -> Protocol {
        Self::Asgi
    }
}
