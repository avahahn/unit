/*
 * NGINX Unit 1.31.1
 *
 * NGINX Unit is a lightweight and versatile application runtime that provides the essential components for your web application as a single open-source server: running application code, serving static assets, handling TLS and request routing.   **Important**: Ufnit's API is designed to expose any part of its configuration as an addressable endpoint.  Suppose a JSON object is stored at `/config/listeners/`:   ```json { \"*:8080\": { \"pass\": \"applications/wp_emea_dev\" } } ```  Here, `/config/listeners/_*:8080` and `/config/listeners/_*:8080/pass` are also endpoints.  Generally, object options are addressable by their names, array items—by their indexes (`/array/0/`).    **Note**: By default, Unit is configured through a UNIX domain socket. To use this specification with OpenAPI tools interactively, [start](https://unit.nginx.org/howto/source/#source-startup) Unit with a TCP port as the control socket.
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: unit-owner@nginx.org
 * Generated by: https://openapi-generator.tech
 */

/// ConfigRouteStepActionShare : An object whose single option defines a step's share action.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigRouteStepActionShare {
    #[serde(rename = "share")]
    pub share: Box<crate::models::StringOrStringArray>,
    /// Filename; tried if share is a directory.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(rename = "fallback", skip_serializing_if = "Option::is_none")]
    pub fallback: Option<Box<crate::models::ConfigRouteStepAction>>,
    /// An array of strings.
    #[serde(rename = "types", skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
    /// Directory pathname that restricts the shareable paths.
    #[serde(rename = "chroot", skip_serializing_if = "Option::is_none")]
    pub chroot: Option<String>,
    /// Turns on and off symbolic link resolution.
    #[serde(rename = "follow_symlinks", skip_serializing_if = "Option::is_none")]
    pub follow_symlinks: Option<bool>,
    /// Turns on and off mount point resolution.
    #[serde(rename = "traverse_mounts", skip_serializing_if = "Option::is_none")]
    pub traverse_mounts: Option<bool>,
    /// Updates the URI of the incoming request before the action is applied.
    #[serde(rename = "rewrite", skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<String>,
    /// Updates the header fields of Unit’s response before the action is taken.
    #[serde(rename = "response_headers", skip_serializing_if = "Option::is_none")]
    pub response_headers: Option<::std::collections::HashMap<String, String>>,
}

impl ConfigRouteStepActionShare {
    /// An object whose single option defines a step's share action.
    pub fn new(share: crate::models::StringOrStringArray) -> ConfigRouteStepActionShare {
        ConfigRouteStepActionShare {
            share: Box::new(share),
            index: None,
            fallback: None,
            types: None,
            chroot: None,
            follow_symlinks: None,
            traverse_mounts: None,
            rewrite: None,
            response_headers: None,
        }
    }
}
